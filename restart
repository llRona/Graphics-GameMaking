

    sf::Text gameOverText;
    gameOverText.setFont(font);
    gameOverText.setString("GAME OVER");
    gameOverText.setCharacterSize(100);
    gameOverText.setFillColor(sf::Color::Red);
    gameOverText.setOrigin(gameOverText.getLocalBounds().width / 2, gameOverText.getLocalBounds().height / 2);
    gameOverText.setPosition(windowWidth / 2, windowHeight / 2);

    while (window.isOpen())
    {
        sf::Event event;
        while (window.pollEvent(event))
        {
            if (event.type == sf::Event::Closed)
                window.close();
            if (event.type == sf::Event::KeyPressed)
            {
                if (event.key.code == sf::Keyboard::Space && !gameOver)
                    falling = true;
            }
        }

        if (!falling && !gameOver)
        {
            // 블록 좌우 이동
            static bool movingRight = true;
            if (movingRight)
            {
                block.move(blockSpeed, 0);
                if (block.getPosition().x + blockSize >= windowWidth)
                    movingRight = false;
            }
            else
            {
                block.move(-blockSpeed, 0);
                if (block.getPosition().x <= 0)
                    movingRight = true;
            }
        }
        else if (falling && !gameOver)
        {
            // 블록 떨어짐
            block.move(0, dropSpeed);

            // 블록 충돌 감지 및 쌓기
            bool placed = false;
            for (const auto& placedBlock : blocks)
            {
                if (block.getGlobalBounds().intersects(placedBlock.getGlobalBounds()))
                {
                    // 블록이 기존 블록을 초과한 부분을 자름
                    float overlapLeft = std::max(block.getPosition().x, placedBlock.getPosition().x);
                    float overlapRight = std::min(block.getPosition().x + block.getSize().x, placedBlock.getPosition().x + placedBlock.getSize().x);
                    float newBlockWidth = overlapRight - overlapLeft;

                    if (newBlockWidth > 0) {
                        block.setSize(sf::Vector2f(newBlockWidth, blockSize));
                        block.setPosition(overlapLeft, placedBlock.getPosition().y - blockSize);
                        blocks.push_back(block);
                        block.setFillColor(getRandomColor()); // 새 블록 색상 설정
                        block.setSize(sf::Vector2f(blockSize, blockSize));
                        block.setPosition((windowWidth - blockSize) / 2, viewYOffset);
                        falling = false;
                        viewYOffset -= blockSize; // 뷰 오프셋 조정
                        view.setCenter(windowWidth / 2, windowHeight / 2 + viewYOffset);
                        window.setView(view);
                        placed = true;
                    } else {
                        gameOver = true;
                    }
                    break;
                }
            }

            // 바닥에 닿으면 멈춤
            if (!placed && block.getPosition().y + blockSize >= windowHeight + viewYOffset - 5)
            {
                gameOver = true;
            }
        }

        window.clear(sf::Color::White);
        window.setView(view); // 뷰 적용
        for (const auto& placedBlock : blocks)
        {
            window.draw(placedBlock);
        }
        window.draw(block);
        window.draw(floor);

        if (gameOver) {
            window.setView(window.getDefaultView()); // 뷰를 기본으로 되돌림
            window.draw(gameOverText); // 게임 오버 텍스트 표시
        }

        window.display();
    }

    return 0;
}

bool isMouseOver(sf::RectangleShape button, sf::RenderWindow &window)
{
    sf::Vector2i mousePos = sf::Mouse::getPosition(window);
    sf::Vector2f buttonPos = button.getPosition();
    sf::Vector2f buttonSize = button.getSize();

    return (mousePos.x >= buttonPos.x && mousePos.x <= buttonPos.x + buttonSize.x &&
            mousePos.y >= buttonPos.y && mousePos.y <= buttonPos.y + buttonSize.y);
}
